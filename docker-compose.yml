version: "3"
services:
  #Mapeamento do banco de produção
  db:
    container_name: pg-prod
    image: postgres:9.6
    
    #O db está na rede da api
    networks:
      - prod_net_api
      
    #Variáveis de ambiente com user e pass para o postgres de produção
    environment:
      - POSTGRES_PASSWORD=passwd
      - POSTGRES_DB=tasks
      
    #Mapeamente de volume para não perder os dados quando o ambiente for reiniciado
    volumes:
      - prod_postgresql:/var/lib/postgresql
      - prod_postgresql_data:/var/lib/postgresql/data

  api:
    #Nome da imagem
    container_name: api-prod
    #Criação de tag versionada de acordo com a variável BUILD_NUMBER fornecida pelo Jenkins 
    image: api_prod:build_${BUILD_NUMBER}
    build:
      #context está no mesmo diretório, por isso o "."
      context: .
      #mapeamento do Dockerfile
      args:
        - WAR_FILE=target/tasks-api.war
        - CONTEXT=tasks-api
    networks:
      - prod_net_api
      - prod_net_web

    #Parâmetros de conexão do db na api
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWD=passwd
      #- DATABASE_UPDATE=none
      
    #A api depende do db no ar  
    depends_on:
      - db

  web:
    #Nome da imagem
    container_name: web-prod
    #Criação de tag versionada de acordo com a variável BUILD_NUMBER fornecida pelo Jenkins 
    image: web_prod:build_${BUILD_NUMBER}
    build:
        #context está no mesmo diretório, por isso o "."
        context: .
        #mapeamento do Dockerfile
        args:
          - WAR_FILE=tasks-web/target/tasks.war
          - CONTEXT=tasks
    networks:
      - prod_net_web
    ports:
      #Porta padrão da imagem é a 8080, mas a 9999 está sendo mapeada para o acesso  
      - 9999:8080
    environment:
      #Host está apontando para o serviço api que aponta para produção  
      - API_HOST=api
      #Porta padrão
      - API_PORT=8080
      - APP_VERSION=build_${BUILD_NUMBER}
    #depends_on:
    #  - api

#Serão 2 redes: uma para a api (onde terá o bd e a api) e outra para web (onde terá a web acessando a api)
#Desse jeito a parte web fica desacoplada do bd
networks:
  prod_net_web:
  prod_net_api:

#Declaração dos volumes
volumes:
  prod_postgresql:
  prod_postgresql_data: